@page "/"
@using Domain.Models
@using Domain.Enums
@using Domain.Services

@inject IAssetsService AssetsService
@inject IDialogService Dialog
@inject ISnackbar Snackbar

<MudTable  class="mt-5 ml-5 mb-5 mr-5" Elevation="5" Items="@assets" Hover="true" Filter="new Func<Asset,bool>(FilterFunc)"
    @bind-SelectedItem="selectedAsset">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Assets</MudText>
        <MudToolBarSpacer />

        <MudTextField @bind-Value="searchString" Placeholder="Enter search term and press enter" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Search" IconSize="Size.Medium" Class="mt-0 mr-5"></MudTextField>

        <MudButton Variant="Variant.Outlined" Color="Color.Primary" class="mr-3 ml-3" @onclick="OpenNewAssetDialog">
            <MudBlazor.MudIcon Icon="@Icons.Material.Add"></MudBlazor.MudIcon>Add Asset
        </MudButton>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Asset Number</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Purchased Date</MudTh>
        <MudTh>Last Assigned Date</MudTh>
        <MudTh>Discarded Date</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Asset Number">@context.AssetNumber</MudTd>
        <MudTd DataLabel="Type">@context.Type.Name</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Purchased Date">@context.PurchasedDate</MudTd>
        <MudTd DataLabel="Last Assigned Date">@context.LastAssignedDate</MudTd>
        <MudTd DataLabel="Discarded Date">@context.DiscardedDate</MudTd>
        <MudTd> 
            @if (context.Status != AssetStatus.Discarded)
            {
                <MudBlazor.MudIcon Icon="@Icons.Material.Edit" class="action-btn" @onclick="() => OpenAssignAssetDialog(context)"/> 
                <MudBlazor.MudIcon Icon="@Icons.Material.Delete" class="action-btn" @onclick="() => DiscardAsset(context)"/>
            }
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>

</MudTable>

@code {
    private string searchString = "";
    private Asset selectedAsset = null;
    private ICollection<Asset> assets = null;
    private HashSet<Asset> selectedAssets = new HashSet<Asset>();

    protected override async Task OnInitializedAsync()
    {   
        assets = await AssetsService.GetAssetsAsync();
    }

    private bool FilterFunc(Asset asset)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (asset.AssetNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (asset.Status.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (asset.Type.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (asset.PurchasedDate.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (asset.LastAssignedDate.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (asset.DiscardedDate.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async void OpenNewAssetDialog() {
        var dialog = Dialog.Show<NewAsset_Dialog>("New Asset", new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true });
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
           assets.Clear();
           assets = await AssetsService.GetAssetsAsync();
        }
        this.StateHasChanged();
    }

    private async void OpenAssignAssetDialog(Asset asset) {
        var parameters = new DialogParameters();
        parameters.Add("selectedAsset", asset);

        var dialog = Dialog.Show<AssignAsset_Dialog>("Assign Asset", parameters, new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true });
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
           assets.Clear();
           assets = await AssetsService.GetAssetsAsync();
        }
        this.StateHasChanged();  
    }

    private async void DiscardAsset(Asset asset) {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to discard this asset? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        
        var dialog = Dialog.Show<Dialog>("Delete", parameters, options);
        
        var result = await dialog.Result;

        if (!result.Cancelled)
        {   
            Snackbar.Add("Asset deletd successfully!", Severity.Warning);
           await AssetsService.DiscardAssetAsync(asset); 
           assets.Clear();
           assets = await AssetsService.GetAssetsAsync();
        }
        this.StateHasChanged();
    }
}   
